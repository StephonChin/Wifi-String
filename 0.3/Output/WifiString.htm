<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Output\WifiString.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Output\WifiString.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060300: Last Updated: Sat Aug 11 11:50:28 2018
<BR><P>
<H3>Maximum Stack Usage =        144 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Hard_Fault_Handler &rArr; stackDump &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[26]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">NMI_Handler</a><BR>
 <LI><a href="#[8]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">SVC_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[a]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SysTick_Handler</a><BR>
 <LI><a href="#[15]">Default_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">Default_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1d]">ACMP_IRQHandler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[1f]">ADC_IRQHandler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[b]">BOD_IRQHandler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[15]">Default_Handler</a> from startup_mini58series.o(.text) referenced 12 times from startup_mini58series.o(RESET)
 <LI><a href="#[d]">EINT0_IRQHandler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[e]">EINT1_IRQHandler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[12]">FB_IRQHandler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[f]">GPIO01_IRQHandler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[10]">GPIO234_IRQHandler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[19]">GPIO5_IRQHandler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[1a]">HIRC_IRQHandler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from retarget.o(.emb_text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[20]">Hard_Fault_Handler</a> from retarget.o(i.Hard_Fault_Handler) referenced from retarget.o(.emb_text)
 <LI><a href="#[1b]">I2C0_IRQHandler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[1c]">I2C1_IRQHandler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[1e]">PDWU_IRQHandler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[11]">PWM_IRQHandler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[24]">Reset_Handler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[18]">SPI_IRQHandler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[13]">TMR0_IRQHandler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[14]">TMR1_IRQHandler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[16]">UART0_IRQHandler</a> from usart.o(i.UART0_IRQHandler) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[17]">UART1_IRQHandler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[c]">WDT_IRQHandler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[25]">__main</a> from __main.o(!!!main) referenced from startup_mini58series.o(.text)
 <LI><a href="#[23]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[22]">fputc</a> from retarget.o(i.fputc) referenced from _printf_char_file.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[25]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[27]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[29]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[91]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[92]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2a]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[93]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[41]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[2b]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
</UL>

<P><STRONG><a name="[2c]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[33]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[94]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[95]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[96]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[2e]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[97]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[98]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[99]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[9a]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[9b]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[9c]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[9d]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[9e]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[9f]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[a0]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[a1]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[a2]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[a3]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[a4]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[a5]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[a6]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[a7]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[a8]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[38]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[a9]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[aa]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[ab]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[ac]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[ad]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[ae]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[af]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[28]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[b0]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[30]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[32]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[b1]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[34]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; MCU_Config &rArr; CLK_Init &rArr; CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; CLK_WaitClockReady
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[b2]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[49]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[37]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[b3]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[39]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, retarget.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>rand</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, rand.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3_4
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3_2
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3_1
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3_0
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_2_3
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_2_0
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_1_3
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_1_1
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sparkle
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instead
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flower_Bloom
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blink
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Process
</UL>

<P><STRONG><a name="[24]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mini58series.o(.text))

<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ACMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>FB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>GPIO01_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>GPIO234_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>GPIO5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>HIRC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PDWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>PWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TMR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_mini58series.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[3b]"></a>__2printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
</UL>

<P><STRONG><a name="[2d]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[b4]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>__printf</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, __printf_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[42]"></a>srand</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3_4
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3_2
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3_1
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3_0
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_2_3
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_2_0
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_1_3
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_1_1
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sparkle
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instead
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flower_Bloom
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blink
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Process
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[2f]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[b5]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3_4
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3_3
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3_2
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3_1
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3_0
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_2_3
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_2_2
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_2_1
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_2_0
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_1_3
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_1_1
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_1_0
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Update
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Steady
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sparkle
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sea_Wave
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Roll
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ripple
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instead
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flower_Bloom
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blink
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Process
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color_Value_Get
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>

<P><STRONG><a name="[b6]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding (Weak Reference)
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[3c]"></a>_printf_char_file</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[45]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[31]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[36]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[bb]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[bc]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[bd]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>All_Color</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, normal_display.o(i.All_Color))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = All_Color
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3_4
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3_3
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3_2
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3_1
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3_0
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_2_4
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_2_3
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_2_0
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_1_3
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_1_2
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_1_1
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_1_0
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_2
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_1
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sea_Wave
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ripple
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Red_Flash
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Polar_Light
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Green_Flash
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flower_Bloom
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color_Show
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blue_Flash
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Off
</UL>

<P><STRONG><a name="[4a]"></a>All_Off</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, normal_display.o(i.All_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = All_Off &rArr; All_Color
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Color
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Display
</UL>

<P><STRONG><a name="[4c]"></a>Blink</STRONG> (Thumb, 402 bytes, Stack size 32 bytes, normal_display.o(i.Blink))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Blink &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Display
</UL>

<P><STRONG><a name="[4f]"></a>Blue_Flash</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, normal_display.o(i.Blue_Flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Blue_Flash &rArr; All_Color
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Color
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Display
</UL>

<P><STRONG><a name="[51]"></a>CLK_DisablePLL</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, clk.o(i.CLK_DisablePLL))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>

<P><STRONG><a name="[50]"></a>CLK_EnablePLL</STRONG> (Thumb, 478 bytes, Stack size 72 bytes, clk.o(i.CLK_EnablePLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CLK_EnablePLL &rArr; CLK_WaitClockReady
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_DisablePLL
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
</UL>

<P><STRONG><a name="[56]"></a>CLK_EnableXtalRC</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, clk.o(i.CLK_EnableXtalRC))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Init
</UL>

<P><STRONG><a name="[58]"></a>CLK_SetCoreClock</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, clk.o(i.CLK_SetCoreClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; CLK_WaitClockReady
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Init
</UL>

<P><STRONG><a name="[57]"></a>CLK_SetHCLK</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, clk.o(i.CLK_SetHCLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CLK_SetHCLK &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Init
</UL>

<P><STRONG><a name="[52]"></a>CLK_WaitClockReady</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, clk.o(i.CLK_WaitClockReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLK_WaitClockReady
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>

<P><STRONG><a name="[5a]"></a>Color_Show</STRONG> (Thumb, 302 bytes, Stack size 28 bytes, normal_display.o(i.Color_Show))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Color_Show &rArr; All_Color
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Color
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Display
</UL>

<P><STRONG><a name="[90]"></a>Count_Down_Control</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, timer_ctrl.o(i.Count_Down_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Count_Down_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5d]"></a>Data_Process</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, data_process.o(i.Data_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Data_Process &rArr; USART_Process &rArr; Color_Value_Get &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Process
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Process
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Count_Down_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>FMC_Erase</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, fmc.o(i.FMC_Erase))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Data
</UL>

<P><STRONG><a name="[63]"></a>FMC_Open</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fmc.o(i.FMC_Open))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Data
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_Data
</UL>

<P><STRONG><a name="[64]"></a>FMC_Read</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fmc.o(i.FMC_Read))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_Data
</UL>

<P><STRONG><a name="[67]"></a>FMC_Write</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fmc.o(i.FMC_Write))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Data
</UL>

<P><STRONG><a name="[61]"></a>Flash_Read_Data</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, flash_prgrm.o(i.Flash_Read_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Flash_Read_Data &rArr; SYS_UnlockReg
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Read
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Data_Init
</UL>

<P><STRONG><a name="[65]"></a>Flash_Write_Data</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, flash_prgrm.o(i.Flash_Write_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Flash_Write_Data &rArr; SYS_UnlockReg
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Write
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Erase
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>Flower_Bloom</STRONG> (Thumb, 536 bytes, Stack size 56 bytes, normal_display.o(i.Flower_Bloom))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Flower_Bloom &rArr; All_Color
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Color
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Display
</UL>

<P><STRONG><a name="[79]"></a>GPIO_SetMode</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, gpio.o(i.GPIO_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Config
</UL>

<P><STRONG><a name="[69]"></a>Green_Flash</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, normal_display.o(i.Green_Flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Green_Flash &rArr; All_Color
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Color
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Display
</UL>

<P><STRONG><a name="[20]"></a>Hard_Fault_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, retarget.o(i.Hard_Fault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = Hard_Fault_Handler &rArr; stackDump &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
</UL>
<BR>[Address Reference Count : 1]<UL><LI> retarget.o(.emb_text)
</UL>
<P><STRONG><a name="[6b]"></a>Instead</STRONG> (Thumb, 516 bytes, Stack size 24 bytes, normal_display.o(i.Instead))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Instead &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Display
</UL>

<P><STRONG><a name="[8f]"></a>Key_Scan</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, key.o(i.Key_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Key_Scan
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>Led_Display</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, display_ctrl.o(i.Led_Display))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Led_Display &rArr; Show_3 &rArr; Show_3_1 &rArr; All_Color
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Steady
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sparkle
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_2
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_1
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sea_Wave
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Roll
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ripple
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Red_Flash
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Polar_Light
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instead
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Green_Flash
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flower_Bloom
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color_Show
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blue_Flash
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blink
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Off
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>Led_Update</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, led_class.o(i.Led_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Led_Update
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[78]"></a>MCU_Config</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, mcu_config.o(i.MCU_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MCU_Config &rArr; CLK_Init &rArr; CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; CLK_WaitClockReady
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetTimeoutCnt
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[72]"></a>Polar_Light</STRONG> (Thumb, 346 bytes, Stack size 40 bytes, normal_display.o(i.Polar_Light))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Polar_Light &rArr; All_Color
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Color
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Display
</UL>

<P><STRONG><a name="[76]"></a>Red_Flash</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, normal_display.o(i.Red_Flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Red_Flash &rArr; All_Color
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Color
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Display
</UL>

<P><STRONG><a name="[71]"></a>Ripple</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, normal_display.o(i.Ripple))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Ripple &rArr; All_Color
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Color
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Display
</UL>

<P><STRONG><a name="[70]"></a>Roll</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, normal_display.o(i.Roll))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Roll
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Display
</UL>

<P><STRONG><a name="[6f]"></a>Sea_Wave</STRONG> (Thumb, 376 bytes, Stack size 24 bytes, normal_display.o(i.Sea_Wave))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Sea_Wave &rArr; All_Color
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Color
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Display
</UL>

<P><STRONG><a name="[8d]"></a>SendChar_ToUART</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, retarget.o(i.SendChar_ToUART))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[73]"></a>Show_1</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, show_1.o(i.Show_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Show_1 &rArr; Show_1_3 &rArr; All_Color
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_1_3
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_1_2
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_1_1
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_1_0
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Color
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Display
</UL>

<P><STRONG><a name="[7e]"></a>Show_1_0</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, show_1.o(i.Show_1_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Show_1_0 &rArr; All_Color
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Color
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_1
</UL>

<P><STRONG><a name="[7f]"></a>Show_1_1</STRONG> (Thumb, 686 bytes, Stack size 32 bytes, show_1.o(i.Show_1_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Show_1_1 &rArr; All_Color
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Color
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_1
</UL>

<P><STRONG><a name="[80]"></a>Show_1_2</STRONG> (Thumb, 358 bytes, Stack size 32 bytes, show_1.o(i.Show_1_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Show_1_2 &rArr; All_Color
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Color
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_1
</UL>

<P><STRONG><a name="[7d]"></a>Show_1_3</STRONG> (Thumb, 722 bytes, Stack size 32 bytes, show_1.o(i.Show_1_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Show_1_3 &rArr; All_Color
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Color
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_1
</UL>

<P><STRONG><a name="[74]"></a>Show_2</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, show_2.o(i.Show_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Show_2 &rArr; Show_2_1
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_2_4
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_2_3
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_2_2
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_2_1
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_2_0
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Color
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Display
</UL>

<P><STRONG><a name="[82]"></a>Show_2_0</STRONG> (Thumb, 640 bytes, Stack size 24 bytes, show_2.o(i.Show_2_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Show_2_0 &rArr; All_Color
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Color
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_2
</UL>

<P><STRONG><a name="[81]"></a>Show_2_1</STRONG> (Thumb, 530 bytes, Stack size 72 bytes, show_2.o(i.Show_2_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Show_2_1
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_2
</UL>

<P><STRONG><a name="[83]"></a>Show_2_2</STRONG> (Thumb, 814 bytes, Stack size 56 bytes, show_2.o(i.Show_2_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Show_2_2
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_2
</UL>

<P><STRONG><a name="[84]"></a>Show_2_3</STRONG> (Thumb, 1084 bytes, Stack size 40 bytes, show_2.o(i.Show_2_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Show_2_3 &rArr; All_Color
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Color
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_2
</UL>

<P><STRONG><a name="[85]"></a>Show_2_4</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, show_2.o(i.Show_2_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Show_2_4 &rArr; All_Color
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Color
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_2
</UL>

<P><STRONG><a name="[75]"></a>Show_3</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, show_3.o(i.Show_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Show_3 &rArr; Show_3_1 &rArr; All_Color
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3_4
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3_3
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3_2
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3_1
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3_0
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Color
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Display
</UL>

<P><STRONG><a name="[86]"></a>Show_3_0</STRONG> (Thumb, 770 bytes, Stack size 64 bytes, show_3.o(i.Show_3_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Show_3_0 &rArr; All_Color
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Color
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3
</UL>

<P><STRONG><a name="[87]"></a>Show_3_1</STRONG> (Thumb, 1400 bytes, Stack size 72 bytes, show_3.o(i.Show_3_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Show_3_1 &rArr; All_Color
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Color
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3
</UL>

<P><STRONG><a name="[88]"></a>Show_3_2</STRONG> (Thumb, 302 bytes, Stack size 24 bytes, show_3.o(i.Show_3_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Show_3_2 &rArr; All_Color
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Color
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3
</UL>

<P><STRONG><a name="[89]"></a>Show_3_3</STRONG> (Thumb, 512 bytes, Stack size 56 bytes, show_3.o(i.Show_3_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Show_3_3 &rArr; All_Color
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Color
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3
</UL>

<P><STRONG><a name="[8a]"></a>Show_3_4</STRONG> (Thumb, 634 bytes, Stack size 24 bytes, show_3.o(i.Show_3_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Show_3_4 &rArr; All_Color
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Color
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3
</UL>

<P><STRONG><a name="[6e]"></a>Sparkle</STRONG> (Thumb, 392 bytes, Stack size 32 bytes, normal_display.o(i.Sparkle))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Sparkle &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Display
</UL>

<P><STRONG><a name="[6d]"></a>Steady</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, normal_display.o(i.Steady))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Steady
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Display
</UL>

<P><STRONG><a name="[59]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, system_mini58series.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Init
</UL>

<P><STRONG><a name="[8b]"></a>TIMER_GetModuleClock</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, timer.o(i.TIMER_GetModuleClock))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
</UL>

<P><STRONG><a name="[7c]"></a>TIMER_Open</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, timer.o(i.TIMER_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMER_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Config
</UL>

<P><STRONG><a name="[16]"></a>UART0_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, usart.o(i.UART0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>UART_Open</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, uart.o(i.UART_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_Open &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Config
</UL>

<P><STRONG><a name="[7a]"></a>UART_SetTimeoutCnt</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart.o(i.UART_SetTimeoutCnt))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Config
</UL>

<P><STRONG><a name="[8e]"></a>Uart_Clear_Buf</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usart.o(i.Uart_Clear_Buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uart_Clear_Buf
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8c]"></a>User_Data_Init</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, data_process.o(i.User_Data_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = User_Data_Init &rArr; Color_Value_Get &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_Data
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color_Value_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5b]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, data_process.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3_3
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3_2
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3_1
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3_0
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_2_4
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_1_3
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_1_1
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_2
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Polar_Light
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color_Show
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Display
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Process
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color_Value_Get
</UL>

<P><STRONG><a name="[40]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[46]"></a>ferror</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, retarget.o(i.ferror))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[22]"></a>fputc</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar_ToUART
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[35]"></a>main</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, wifistring.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = main &rArr; MCU_Config &rArr; CLK_Init &rArr; CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; CLK_WaitClockReady
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Clear_Buf
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Count_Down_Control
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Config
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Update
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Data
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Display
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Data_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[6a]"></a>stackDump</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, retarget.o(i.stackDump))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = stackDump &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[5c]"></a>Color_Value_Get</STRONG> (Thumb, 1280 bytes, Stack size 24 bytes, data_process.o(i.Color_Value_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Color_Value_Get &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Data_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Process
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Process
</UL>

<P><STRONG><a name="[5f]"></a>Count_Down_Process</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, data_process.o(i.Count_Down_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Count_Down_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Process
</UL>

<P><STRONG><a name="[5e]"></a>Key_Process</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, data_process.o(i.Key_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Key_Process &rArr; Color_Value_Get &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color_Value_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Process
</UL>

<P><STRONG><a name="[60]"></a>USART_Process</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, data_process.o(i.USART_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART_Process &rArr; Color_Value_Get &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color_Value_Get
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Process
</UL>

<P><STRONG><a name="[62]"></a>SYS_UnlockReg</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, flash_prgrm.o(i.SYS_UnlockReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Data
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_Data
</UL>

<P><STRONG><a name="[54]"></a>CLK_Init</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, mcu_config.o(i.CLK_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CLK_Init &rArr; CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; CLK_WaitClockReady
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableXtalRC
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Config
</UL>

<P><STRONG><a name="[55]"></a>SYS_UnlockReg</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mcu_config.o(i.SYS_UnlockReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Config
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Init
</UL>

<P><STRONG><a name="[53]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, uart.o(i.CLK_GetPLLClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
</UL>

<P><STRONG><a name="[15]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[48]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[44]"></a>_printf_post_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[43]"></a>_printf_pre_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[3d]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>
<HR></body></html>
